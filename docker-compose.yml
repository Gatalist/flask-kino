
services:
    flask-postgres:
        container_name: flask_postgres
        image: postgres:16
        restart: always
        env_file:
            - ./app/.env
        ports:
            - "5432:5432"
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS}
            POSTGRES_DB: ${DB_NAME}
        volumes:
#            - ./postgres/backup:/home/backup
            - ./postgres/database:/var/lib/postgresql/data
            - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        networks:
            - flask_app_network

    flask-app:
        container_name: flask_app
        build: ./app
        environment:
            DB_HOST: flask-postgres
            DB_PORT: 5432
            DB_USER: ${DB_USER}
            DB_PASSWORD: ${DB_PASS}
        entrypoint: ["sh", "./entrypoint.sh"]
        restart: always
        ports:
            - "5000:5000"
        depends_on:
            - flask-postgres
        volumes:
            - ./app:/home/app
            - ./postgres/backup:/home/backup
        networks:
            - flask_app_network

    flask-nginx:
        container_name: flask_nginx
        build: ./nginx
        ports:
            - "80:80"
            - "443:443"
        command: "/bin/sh /nginx-autoreload.sh"
        volumes:
            - ./app/app/static:/app/staticfiles
            - ./nginx/nginx-autoreload.sh:/nginx-autoreload.sh
#            - ./nginx/conf_dev/:/etc/nginx/conf.d/:ro
            #      - ./nginx/conf_prod/:/etc/nginx/conf.d/:ro
            #      - ./nginx/ssl_https:/home/ssl_https
        environment:
            - FLASK_PORT=${FLASK_PORT:?error missing FLASK_PORT env}
        depends_on:
            - flask-app
        networks:
            - flask_app_network
        restart: always

networks:
  flask_app_network:
    driver: bridge
