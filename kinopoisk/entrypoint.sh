#!/bin/sh

# Check if FLASK_PORT is set, otherwise show an error and exit
: "${FLASK_PORT:?error missing FLASK_PORT env}"

# –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å flask-app
FLASK_IP=$(getent hosts flask-app | awk '{ print $1 }')
POSTGRES_IP=$(getent hosts flask-postgres | awk '{ print $1 }')

# –î–æ–±–∞–≤–ª—è–µ–º flask-app –≤ /etc/hosts (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
if [ -n "$FLASK_IP" ]; then
    echo "–î–æ–±–∞–≤–ª—è–µ–º flask-app —Å IP $FLASK_IP –≤ /etc/hosts"
    echo "$FLASK_IP flask-app" >> /etc/hosts
else
    echo "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IP flask-app"
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º IP flask-postgres
PG_IP=$(getent hosts flask-postgres | awk '{ print $1 }')

# –î–æ–±–∞–≤–ª—è–µ–º flask-postgres –≤ /etc/hosts
if [ -n "$PG_IP" ]; then
    echo "–î–æ–±–∞–≤–ª—è–µ–º flask-postgres —Å IP $PG_IP –≤ /etc/hosts"
    echo "$PG_IP flask-postgres" >> /etc/hosts
else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IP flask-postgres"
    exit 1
fi



# Function to wait for the FLASK service to be healthy
wait_for_app_service() {
    echo "Waiting for app service on port PORT..."
    while ! curl -s "http://flask-app:$FLASK_PORT" > /dev/null; do
        echo "App service not ready, waiting..."
        sleep 5
    done
    echo "App service is ready."
}

wait_for_wireguard_port() {
    echo "‚è≥ Waiting for WireGuard tunnel wg0... [port: 51820]"
    while ! nc -z wireguard-vpn 51820; do
        echo "WireGuard service not ready, waiting... [port: 51820]"
        sleep 5
    done
    echo "‚úÖ WireGuard tunnel is active [port: 51820]"
}

wait_for_app_service
wait_for_wireguard

echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞..."
exec python main.py